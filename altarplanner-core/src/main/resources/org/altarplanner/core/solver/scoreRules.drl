package org.altarplanner.core.solver;
dialect  "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import org.altarplanner.core.domain.request.DateOffRequest;
import org.altarplanner.core.domain.request.DateTimeOnRequest;
import org.altarplanner.core.domain.request.PairRequest;
import org.altarplanner.core.domain.request.ServiceTypeOffRequest;
import org.altarplanner.core.domain.planning.Server;
import org.altarplanner.core.domain.planning.Service;
import java.time.temporal.ChronoUnit;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "oneServicePerDay"
    when
        Service($id : planningId, $server : server != null, $date : mass.dateTime.toLocalDate)
        Service(mass.dateTime.toLocalDate == $date, planningId > $id, server == $server)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "notEnoughExp"
    when
        Service(server != null, server.year > type.maxYear)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "dateOffRequest"
    when
        DateOffRequest($server : key, $date : value)
        Service(server == $server, mass.dateTime.toLocalDate == $date)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "serviceTypeOffRequest"
    when
        ServiceTypeOffRequest($server : key, $serviceType : value)
        Service(server == $server, type == $serviceType)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "dateTimeOnRequest"
    when
        DateTimeOnRequest($server : key, $dateTime : value)
        Service(mass.dateTime == $dateTime)
        not Service(server == $server, mass.dateTime == $dateTime)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "pairRequest"
    when
        PairRequest($server : key, $pairedWith : value)
        Service(server == $server, $mass : mass)
        not Service(server == $pairedWith, mass == $mass)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -10);
end

rule "maximizeIntervals"
    when
        Service($server : server != null, $date1 : mass.dateTime.toLocalDate)
        Service(server == $server, $date2 : mass.dateTime.toLocalDate > $date1)
        not Service(server == $server, $date1 < mass.dateTime.toLocalDate, mass.dateTime.toLocalDate < $date2)
    then
        long softWeight = - 14 / ChronoUnit.DAYS.between($date1, $date2);
        scoreHolder.addSoftConstraintMatch(kcontext, Math.toIntExact(softWeight));
end

rule "tooMuchExp"
    when
        Service(server != null, $diff : (type.minYear - server.year) > 0)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - 5 * $diff);
end

rule "minimizeServices"
    when
        $server : Server()
        accumulate(
            $assignment : Service(server == $server);
            $total : count($assignment);
            $total > 0
        )
    then
        int totalInt = $total.intValue();
        scoreHolder.addSoftConstraintMatch(kcontext, - totalInt * totalInt);
end